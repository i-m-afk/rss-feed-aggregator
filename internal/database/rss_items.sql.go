// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rss_items.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRssItem = `-- name: CreateRssItem :one
INSERT INTO rss_items(id, created_at, updated_at, title, url, author, description, published_at, post_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
returning id, created_at, updated_at, title, url, author, description, published_at, post_id
`

type CreateRssItemParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
	Title       string
	Url         string
	Author      sql.NullString
	Description sql.NullString
	PublishedAt sql.NullString
	PostID      uuid.NullUUID
}

func (q *Queries) CreateRssItem(ctx context.Context, arg CreateRssItemParams) (RssItem, error) {
	row := q.db.QueryRowContext(ctx, createRssItem,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.Author,
		arg.Description,
		arg.PublishedAt,
		arg.PostID,
	)
	var i RssItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Author,
		&i.Description,
		&i.PublishedAt,
		&i.PostID,
	)
	return i, err
}

const getRssItems = `-- name: GetRssItems :many
Select id, created_at, updated_at, title, url, author, description, published_at, post_id from rss_items
ORDER BY published_at
LIMIT $1
`

func (q *Queries) GetRssItems(ctx context.Context, limit int32) ([]RssItem, error) {
	rows, err := q.db.QueryContext(ctx, getRssItems, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RssItem
	for rows.Next() {
		var i RssItem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Author,
			&i.Description,
			&i.PublishedAt,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRssItemsForUser = `-- name: GetRssItemsForUser :many
SELECT 
    ri.id AS rss_item_id,
    ri.created_at AS rss_item_created_at,
    ri.updated_at AS rss_item_updated_at,
    ri.title AS rss_item_title,
    ri.url AS rss_item_url,
    ri.author AS rss_item_author,
    ri.description AS rss_item_description,
    ri.published_at AS rss_item_published_at,
    ri.post_id AS rss_item_post_id
FROM 
    rss_items ri
JOIN 
    posts p ON ri.post_id = p.id
JOIN 
    feeds f ON p.feed_id = f.id
JOIN 
    feed_follow ff ON f.id = ff.feed_id
WHERE 
    ff.user_id = $1
`

type GetRssItemsForUserRow struct {
	RssItemID          uuid.UUID
	RssItemCreatedAt   time.Time
	RssItemUpdatedAt   sql.NullTime
	RssItemTitle       string
	RssItemUrl         string
	RssItemAuthor      sql.NullString
	RssItemDescription sql.NullString
	RssItemPublishedAt sql.NullString
	RssItemPostID      uuid.NullUUID
}

func (q *Queries) GetRssItemsForUser(ctx context.Context, userID uuid.NullUUID) ([]GetRssItemsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getRssItemsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRssItemsForUserRow
	for rows.Next() {
		var i GetRssItemsForUserRow
		if err := rows.Scan(
			&i.RssItemID,
			&i.RssItemCreatedAt,
			&i.RssItemUpdatedAt,
			&i.RssItemTitle,
			&i.RssItemUrl,
			&i.RssItemAuthor,
			&i.RssItemDescription,
			&i.RssItemPublishedAt,
			&i.RssItemPostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
